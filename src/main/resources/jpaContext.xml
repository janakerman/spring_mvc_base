<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">

    <context:annotation-config />

    <!-- Spring, can you please use the persistence context annotations? -->
    <bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />

    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="punit" />
        <property name="dataSource" ref="dataSource" />
        <property name="jpaVendorAdaptor">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <!-- Show sql behind the scenes when running - good for debugging -->
                <property name="showSql" value="true" />
            </bean>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <!-- What vendor of DB we are going against, allows Hibernate to generate the right sql for the DB -->
                <entry key="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
                <!-- Option that specifies DB creation / validation / etc based on a schema, on app start up -->
                <entry key="hibernate.hbm2ddl.auto" value="none" />
                <!-- Pretty SQL formatting -->
                <entry key="hibernate.format_sql" value="true" />
            </map>
        </property>
    </bean>

    <!-- All of our JPA interactions will be wrapped in this transaction by doing this. Doesn't start and stop, it just makes the
    transaction manager available to us -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <!-- Here we specify that our transactions are annotation configured, and point to the transaction manager to use -->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/fitnesstracker?autoReconnect=true" />
        <property name="username" value="root" />
        <property name="password" value="password" />
    </bean>

</beans>
